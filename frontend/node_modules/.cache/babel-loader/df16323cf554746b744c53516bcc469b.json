{"ast":null,"code":"import { GLOBALTYPES } from './globalTypes';\nimport { postDataAPI, deleteDataAPI, getDataAPI, patchDataAPI } from '../../utils/fetchData';\nexport const NOTIFY_TYPES = {\n  CREATE_NOTIFY_REPORT: 'CREATE_NOTIFY_REPORT',\n  GET_NOTIFIES: 'GET_NOTIFIES',\n  CREATE_NOTIFY: 'CREATE_NOTIFY',\n  REMOVE_NOTIFY: 'REMOVE_NOTIFY',\n  UPDATE_NOTIFY: 'UPDATE_NOTIFY',\n  UPDATE_SOUND: 'UPDATE_SOUND',\n  DELETE_ALL_NOTIFIES: 'DELETE_ALL_NOTIFIES'\n};\n// export const createNotifyReport = ({ msg, auth, socket }) => async (dispatch) => {\n//     try {\n//         const res = await postDataAPI('notify', msg, auth.token)\n//         // console.log(res)\n//         socket.emit('createNotifyReport', {\n//             ...res.data.notify,\n//             user: {\n//                 username: auth.user.username,\n//                 avatar: auth.user.avatar\n//             }\n//         })\n\n//     }\n//     catch (err) {\n//         dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err.response.data.msg } })\n//     }\n// }\n\nexport const createNotify = _ref => {\n  let {\n    msg,\n    auth,\n    socket\n  } = _ref;\n  return async dispatch => {\n    try {\n      const res = await postDataAPI('notify', msg, auth.token);\n      console.log(res);\n      socket.emit('createNotify', {\n        ...res.data.notify,\n        user: {\n          username: auth.user.username,\n          avatar: auth.user.avatar\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const removeNotify = _ref2 => {\n  let {\n    msg,\n    auth,\n    socket\n  } = _ref2;\n  return async dispatch => {\n    try {\n      await deleteDataAPI(`notify/${msg.id}?url=${msg.url}`, auth.token);\n      socket.emit('removeNotify', msg);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getNotifies = token => async dispatch => {\n  try {\n    const res = await getDataAPI('notifies', token);\n    // console.log(res)\n    dispatch({\n      type: NOTIFY_TYPES.GET_NOTIFIES,\n      payload: res.data.notifies\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const isReadNotify = _ref3 => {\n  let {\n    msg,\n    auth\n  } = _ref3;\n  return async dispatch => {\n    dispatch({\n      type: NOTIFY_TYPES.UPDATE_NOTIFY,\n      payload: {\n        ...msg,\n        isRead: true\n      }\n    });\n    try {\n      await patchDataAPI(`/isReadNotify/${msg._id}`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteAllNotifies = token => async dispatch => {\n  dispatch({\n    type: NOTIFY_TYPES.DELETE_ALL_NOTIFIES,\n    payload: []\n  });\n  try {\n    await deleteDataAPI('deleteAllNotify', token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"names":["GLOBALTYPES","postDataAPI","deleteDataAPI","getDataAPI","patchDataAPI","NOTIFY_TYPES","CREATE_NOTIFY_REPORT","GET_NOTIFIES","CREATE_NOTIFY","REMOVE_NOTIFY","UPDATE_NOTIFY","UPDATE_SOUND","DELETE_ALL_NOTIFIES","createNotify","_ref","msg","auth","socket","dispatch","res","token","console","log","emit","data","notify","user","username","avatar","err","type","ALERT","payload","error","response","removeNotify","_ref2","id","url","getNotifies","notifies","isReadNotify","_ref3","isRead","_id","deleteAllNotifies"],"sources":["D:/JoynetSocialNetwork/do-an-fe/src/redux/actions/notifyAction.js"],"sourcesContent":["import { GLOBALTYPES } from './globalTypes'\r\nimport { postDataAPI, deleteDataAPI, getDataAPI, patchDataAPI } from '../../utils/fetchData'\r\n\r\nexport const NOTIFY_TYPES = {\r\n    CREATE_NOTIFY_REPORT: 'CREATE_NOTIFY_REPORT',\r\n    GET_NOTIFIES: 'GET_NOTIFIES',\r\n    CREATE_NOTIFY: 'CREATE_NOTIFY',\r\n    REMOVE_NOTIFY: 'REMOVE_NOTIFY',\r\n    UPDATE_NOTIFY: 'UPDATE_NOTIFY',\r\n    UPDATE_SOUND: 'UPDATE_SOUND',\r\n    DELETE_ALL_NOTIFIES: 'DELETE_ALL_NOTIFIES'\r\n}\r\n// export const createNotifyReport = ({ msg, auth, socket }) => async (dispatch) => {\r\n//     try {\r\n//         const res = await postDataAPI('notify', msg, auth.token)\r\n//         // console.log(res)\r\n//         socket.emit('createNotifyReport', {\r\n//             ...res.data.notify,\r\n//             user: {\r\n//                 username: auth.user.username,\r\n//                 avatar: auth.user.avatar\r\n//             }\r\n//         })\r\n\r\n//     }\r\n//     catch (err) {\r\n//         dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err.response.data.msg } })\r\n//     }\r\n// }\r\n\r\n\r\nexport const createNotify = ({ msg, auth, socket }) => async (dispatch) => {\r\n    try {\r\n        const res = await postDataAPI('notify', msg, auth.token)\r\n        console.log(res)\r\n\r\n        socket.emit('createNotify', {\r\n            ...res.data.notify,\r\n            user: {\r\n                username: auth.user.username,\r\n                avatar: auth.user.avatar\r\n            }\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err.response.data.msg } })\r\n    }\r\n}\r\n\r\n\r\nexport const removeNotify = ({ msg, auth, socket }) => async (dispatch) => {\r\n    try {\r\n        await deleteDataAPI(`notify/${msg.id}?url=${msg.url}`, auth.token)\r\n\r\n        socket.emit('removeNotify', msg)\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err.response.data.msg } })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const getNotifies = (token) => async (dispatch) => {\r\n    try {\r\n        const res = await getDataAPI('notifies', token)\r\n        // console.log(res)\r\n        dispatch({ type: NOTIFY_TYPES.GET_NOTIFIES, payload: res.data.notifies })\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err.response.data.msg } })\r\n    }\r\n}\r\n\r\nexport const isReadNotify = ({ msg, auth }) => async (dispatch) => {\r\n    dispatch({ type: NOTIFY_TYPES.UPDATE_NOTIFY, payload: { ...msg, isRead: true } })\r\n    try {\r\n        await patchDataAPI(`/isReadNotify/${msg._id}`, null, auth.token)\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err.response.data.msg } })\r\n    }\r\n}\r\n\r\nexport const deleteAllNotifies = (token) => async (dispatch) => {\r\n    dispatch({ type: NOTIFY_TYPES.DELETE_ALL_NOTIFIES, payload: [] })\r\n    try {\r\n        await deleteDataAPI('deleteAllNotify', token)\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err.response.data.msg } })\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}