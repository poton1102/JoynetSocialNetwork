{"ast":null,"code":"import { MESS_TYPES } from '../actions/messageAction';\nimport { EditData, DeleteData } from '../actions/globalTypes';\n\n// const initialState = {\n//     users: [],\n//     resultUsers: 0,\n//     data: [],\n//     firstLoad: false\n// }\n\nconst initialState = {\n  users: [],\n  resultUsers: 0,\n  data: [],\n  firstLoad: false,\n  chats: [],\n  selectedChat: null,\n  chatsLength: 0\n};\nconst messageReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case MESS_TYPES.ADD_CHAT:\n      if (state.chats.every(item => item._id !== action.payload._id)) {\n        return {\n          ...state,\n          users: [action.payload, ...state.chats]\n        };\n      }\n      return state;\n    case MESS_TYPES.ADD_MESSAGE:\n      return {\n        ...state,\n        data: state.data.map(item => item._id === action.payload.recipient || item._id === action.payload.sender ? {\n          ...item,\n          messages: [...item.messages, action.payload],\n          result: item.result + 1\n        } : item),\n        users: state.users.map(user => user._id === action.payload.recipient || user._id === action.payload.sender ? {\n          ...user,\n          text: action.payload.text,\n          media: action.payload.media,\n          call: action.payload.call\n        } : user)\n      };\n    case MESS_TYPES.GET_CONVERSATIONS:\n      return {\n        ...state,\n        chats: [...state.chats, ...action.payload.chats],\n        chatLengths: state.chatsLength + action.payload.chatsLength\n      };\n    case MESS_TYPES.SET_SELECTED_CHAT:\n      return {\n        ...state,\n        selectedChat: action.payload\n      };\n    case MESS_TYPES.GET_MESSAGES:\n      return {\n        ...state,\n        data: [...state.data, action.payload]\n      };\n    case MESS_TYPES.UPDATE_MESSAGES:\n      return {\n        ...state,\n        data: EditData(state.data, action.payload._id, action.payload)\n      };\n    case MESS_TYPES.DELETE_MESSAGES:\n      return {\n        ...state,\n        data: state.data.map(item => item._id === action.payload._id ? {\n          ...item,\n          messages: action.payload.newData\n        } : item)\n      };\n    case MESS_TYPES.DELETE_CONVERSATION:\n      return {\n        ...state,\n        users: DeleteData(state.users, action.payload),\n        data: DeleteData(state.data, action.payload)\n      };\n    case MESS_TYPES.CHECK_ONLINE_OFFLINE:\n      return {\n        ...state,\n        users: state.users.map(user => action.payload.includes(user._id) ? {\n          ...user,\n          online: true\n        } : {\n          ...user,\n          online: false\n        })\n      };\n    default:\n      return state;\n  }\n};\nexport default messageReducer;","map":{"version":3,"names":["MESS_TYPES","EditData","DeleteData","initialState","users","resultUsers","data","firstLoad","chats","selectedChat","chatsLength","messageReducer","state","arguments","length","undefined","action","type","ADD_CHAT","every","item","_id","payload","ADD_MESSAGE","map","recipient","sender","messages","result","user","text","media","call","GET_CONVERSATIONS","chatLengths","SET_SELECTED_CHAT","GET_MESSAGES","UPDATE_MESSAGES","DELETE_MESSAGES","newData","DELETE_CONVERSATION","CHECK_ONLINE_OFFLINE","includes","online"],"sources":["D:/JoynetSocialNetwork/do-an-fe/src/redux/reducers/messageReducer.js"],"sourcesContent":["import { MESS_TYPES } from '../actions/messageAction'\r\nimport { EditData, DeleteData } from '../actions/globalTypes'\r\n\r\n// const initialState = {\r\n//     users: [],\r\n//     resultUsers: 0,\r\n//     data: [],\r\n//     firstLoad: false\r\n// }\r\n\r\nconst initialState = {\r\n    users: [],\r\n    resultUsers: 0,\r\n    data: [],\r\n    firstLoad: false,\r\n\r\n    chats: [],\r\n    selectedChat: null,\r\n    chatsLength: 0,\r\n}\r\n\r\nconst messageReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case MESS_TYPES.ADD_CHAT:\r\n            if (state.chats.every(item => item._id !== action.payload._id)) {\r\n                return {\r\n                    ...state,\r\n                    users: [action.payload, ...state.chats]\r\n                };\r\n            }\r\n            return state;\r\n        case MESS_TYPES.ADD_MESSAGE:\r\n            return {\r\n                ...state,\r\n                data: state.data.map(item =>\r\n                    item._id === action.payload.recipient || item._id === action.payload.sender\r\n                        ? {\r\n                            ...item,\r\n                            messages: [...item.messages, action.payload],\r\n                            result: item.result + 1\r\n                        }\r\n                        : item\r\n                ),\r\n                users: state.users.map(user =>\r\n                    user._id === action.payload.recipient || user._id === action.payload.sender\r\n                        ? {\r\n                            ...user,\r\n                            text: action.payload.text,\r\n                            media: action.payload.media,\r\n                            call: action.payload.call\r\n                        }\r\n                        : user\r\n                )\r\n            };\r\n        case MESS_TYPES.GET_CONVERSATIONS:\r\n            return {\r\n                ...state,\r\n                chats: [...state.chats, ...action.payload.chats],\r\n                chatLengths: state.chatsLength + action.payload.chatsLength\r\n            };\r\n        case MESS_TYPES.SET_SELECTED_CHAT:\r\n            return {\r\n                ...state,\r\n                selectedChat: action.payload,\r\n            };\r\n        case MESS_TYPES.GET_MESSAGES:\r\n            return {\r\n                ...state,\r\n                data: [...state.data, action.payload]\r\n            };\r\n        case MESS_TYPES.UPDATE_MESSAGES:\r\n            return {\r\n                ...state,\r\n                data: EditData(state.data, action.payload._id, action.payload)\r\n            };\r\n        case MESS_TYPES.DELETE_MESSAGES:\r\n            return {\r\n                ...state,\r\n                data: state.data.map(item =>\r\n                    item._id === action.payload._id\r\n                        ? { ...item, messages: action.payload.newData }\r\n                        : item\r\n                )\r\n            };\r\n        case MESS_TYPES.DELETE_CONVERSATION:\r\n            return {\r\n                ...state,\r\n                users: DeleteData(state.users, action.payload),\r\n                data: DeleteData(state.data, action.payload)\r\n            };\r\n        case MESS_TYPES.CHECK_ONLINE_OFFLINE:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user =>\r\n                    action.payload.includes(user._id)\r\n                        ? { ...user, online: true }\r\n                        : { ...user, online: false }\r\n                )\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default messageReducer;"],"mappings":"AAAA,SAASA,UAAU,QAAQ,0BAA0B;AACrD,SAASC,QAAQ,EAAEC,UAAU,QAAQ,wBAAwB;;AAE7D;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE,CAAC;EACdC,IAAI,EAAE,EAAE;EACRC,SAAS,EAAE,KAAK;EAEhBC,KAAK,EAAE,EAAE;EACTC,YAAY,EAAE,IAAI;EAClBC,WAAW,EAAE;AACjB,CAAC;AAED,MAAMC,cAAc,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGV,YAAY;EAAA,IAAEa,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAChD,QAAQC,MAAM,CAACC,IAAI;IACf,KAAKjB,UAAU,CAACkB,QAAQ;MACpB,IAAIN,KAAK,CAACJ,KAAK,CAACW,KAAK,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKL,MAAM,CAACM,OAAO,CAACD,GAAG,CAAC,EAAE;QAC5D,OAAO;UACH,GAAGT,KAAK;UACRR,KAAK,EAAE,CAACY,MAAM,CAACM,OAAO,EAAE,GAAGV,KAAK,CAACJ,KAAK;QAC1C,CAAC;MACL;MACA,OAAOI,KAAK;IAChB,KAAKZ,UAAU,CAACuB,WAAW;MACvB,OAAO;QACH,GAAGX,KAAK;QACRN,IAAI,EAAEM,KAAK,CAACN,IAAI,CAACkB,GAAG,CAACJ,IAAI,IACrBA,IAAI,CAACC,GAAG,KAAKL,MAAM,CAACM,OAAO,CAACG,SAAS,IAAIL,IAAI,CAACC,GAAG,KAAKL,MAAM,CAACM,OAAO,CAACI,MAAM,GACrE;UACE,GAAGN,IAAI;UACPO,QAAQ,EAAE,CAAC,GAAGP,IAAI,CAACO,QAAQ,EAAEX,MAAM,CAACM,OAAO,CAAC;UAC5CM,MAAM,EAAER,IAAI,CAACQ,MAAM,GAAG;QAC1B,CAAC,GACCR,IACV,CAAC;QACDhB,KAAK,EAAEQ,KAAK,CAACR,KAAK,CAACoB,GAAG,CAACK,IAAI,IACvBA,IAAI,CAACR,GAAG,KAAKL,MAAM,CAACM,OAAO,CAACG,SAAS,IAAII,IAAI,CAACR,GAAG,KAAKL,MAAM,CAACM,OAAO,CAACI,MAAM,GACrE;UACE,GAAGG,IAAI;UACPC,IAAI,EAAEd,MAAM,CAACM,OAAO,CAACQ,IAAI;UACzBC,KAAK,EAAEf,MAAM,CAACM,OAAO,CAACS,KAAK;UAC3BC,IAAI,EAAEhB,MAAM,CAACM,OAAO,CAACU;QACzB,CAAC,GACCH,IACV;MACJ,CAAC;IACL,KAAK7B,UAAU,CAACiC,iBAAiB;MAC7B,OAAO;QACH,GAAGrB,KAAK;QACRJ,KAAK,EAAE,CAAC,GAAGI,KAAK,CAACJ,KAAK,EAAE,GAAGQ,MAAM,CAACM,OAAO,CAACd,KAAK,CAAC;QAChD0B,WAAW,EAAEtB,KAAK,CAACF,WAAW,GAAGM,MAAM,CAACM,OAAO,CAACZ;MACpD,CAAC;IACL,KAAKV,UAAU,CAACmC,iBAAiB;MAC7B,OAAO;QACH,GAAGvB,KAAK;QACRH,YAAY,EAAEO,MAAM,CAACM;MACzB,CAAC;IACL,KAAKtB,UAAU,CAACoC,YAAY;MACxB,OAAO;QACH,GAAGxB,KAAK;QACRN,IAAI,EAAE,CAAC,GAAGM,KAAK,CAACN,IAAI,EAAEU,MAAM,CAACM,OAAO;MACxC,CAAC;IACL,KAAKtB,UAAU,CAACqC,eAAe;MAC3B,OAAO;QACH,GAAGzB,KAAK;QACRN,IAAI,EAAEL,QAAQ,CAACW,KAAK,CAACN,IAAI,EAAEU,MAAM,CAACM,OAAO,CAACD,GAAG,EAAEL,MAAM,CAACM,OAAO;MACjE,CAAC;IACL,KAAKtB,UAAU,CAACsC,eAAe;MAC3B,OAAO;QACH,GAAG1B,KAAK;QACRN,IAAI,EAAEM,KAAK,CAACN,IAAI,CAACkB,GAAG,CAACJ,IAAI,IACrBA,IAAI,CAACC,GAAG,KAAKL,MAAM,CAACM,OAAO,CAACD,GAAG,GACzB;UAAE,GAAGD,IAAI;UAAEO,QAAQ,EAAEX,MAAM,CAACM,OAAO,CAACiB;QAAQ,CAAC,GAC7CnB,IACV;MACJ,CAAC;IACL,KAAKpB,UAAU,CAACwC,mBAAmB;MAC/B,OAAO;QACH,GAAG5B,KAAK;QACRR,KAAK,EAAEF,UAAU,CAACU,KAAK,CAACR,KAAK,EAAEY,MAAM,CAACM,OAAO,CAAC;QAC9ChB,IAAI,EAAEJ,UAAU,CAACU,KAAK,CAACN,IAAI,EAAEU,MAAM,CAACM,OAAO;MAC/C,CAAC;IACL,KAAKtB,UAAU,CAACyC,oBAAoB;MAChC,OAAO;QACH,GAAG7B,KAAK;QACRR,KAAK,EAAEQ,KAAK,CAACR,KAAK,CAACoB,GAAG,CAACK,IAAI,IACvBb,MAAM,CAACM,OAAO,CAACoB,QAAQ,CAACb,IAAI,CAACR,GAAG,CAAC,GAC3B;UAAE,GAAGQ,IAAI;UAAEc,MAAM,EAAE;QAAK,CAAC,GACzB;UAAE,GAAGd,IAAI;UAAEc,MAAM,EAAE;QAAM,CACnC;MACJ,CAAC;IACL;MACI,OAAO/B,KAAK;EACpB;AACJ,CAAC;AAED,eAAeD,cAAc"},"metadata":{},"sourceType":"module"}