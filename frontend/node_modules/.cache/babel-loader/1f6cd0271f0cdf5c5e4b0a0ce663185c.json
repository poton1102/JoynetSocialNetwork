{"ast":null,"code":"import { deleteDataAPI, getDataAPI, postDataAPI } from \"../../utils/fetchData\";\nimport { GLOBALTYPES } from \"./globalTypes\";\nimport { createNotify } from './notifyAction';\nexport const REPORT_TYPES = {\n  CREATE_REPORT: 'CREATE_REPORT',\n  GET_ALL_REPORT: 'GET_ALL_REPORT',\n  DELETE_REPORT: 'DELETE_REPORT',\n  DELETE_REPORT_ONLY: 'DELETE_REPORT_ONLY'\n};\nexport const createReport = _ref => {\n  let {\n    post,\n    reportData,\n    auth\n  } = _ref;\n  return async dispatch => {\n    if (reportData.length > 200) return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Báo cáo chỉ được tối đa 200 ký tự.\"\n      }\n    });\n    try {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          loading: true\n        }\n      });\n      const res = await postDataAPI(`post/${post._id}/report`, {\n        reportData\n      }, auth.token);\n      dispatch({\n        type: REPORT_TYPES.CREATE_REPORT,\n        payload: {\n          ...res.data.newReport,\n          reporter: auth.user\n        }\n      });\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          success: res.data.msg\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getAllReports = token => async dispatch => {\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await getDataAPI('reports', token);\n    // console.log(res.data)\n\n    dispatch({\n      type: REPORT_TYPES.GET_ALL_REPORT,\n      payload: {\n        ...res.data\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteReport = _ref2 => {\n  let {\n    reportId,\n    auth,\n    socket\n  } = _ref2;\n  return async dispatch => {\n    // console.log({post,auth})\n\n    try {\n      // const res = await deleteDataAPI(`report/${report.reports._id}`, auth.token)\n      await deleteDataAPI(`report/${reportId}`, auth.token);\n      dispatch({\n        type: REPORT_TYPES.DELETE_REPORT,\n        payload: reportId\n      });\n\n      // Gọi API để lấy danh sách báo cáo mới từ backend\n      const res = await getDataAPI('reports', auth.token);\n      dispatch({\n        type: REPORT_TYPES.GET_ALL_REPORT,\n        payload: {\n          ...res.data\n        }\n      });\n\n      // console.log(res)\n      // Notify\n      const msg = {\n        id: reportId,\n        text: 'đã xóa bài viết của bạn vì vi phạm.',\n        // recipients: res.data.newPost.user.followers,\n        url: `/post/${reportId}`\n      };\n      dispatch(createNotify({\n        msg,\n        auth,\n        socket\n      }));\n      // dispatch(removeNotify({ msg, auth, socket }))\n      // Notify\n      // const msg = {\n      //     id: post._id,\n      //     text: 'added a new post.',\n      //     recipients: res.data.newPost.user.followers,\n      //     url: `/post/${post._id}`,\n      // }\n\n      // dispatch(removeNotify({ msg, auth, socket }))\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteReportOnly = _ref3 => {\n  let {\n    reportId,\n    auth,\n    socket\n  } = _ref3;\n  return async dispatch => {\n    // console.log({post,auth})\n\n    try {\n      // const res = await deleteDataAPI(`report/${report.reports._id}`, auth.token)\n      await deleteDataAPI(`report/${reportId}`, auth.token);\n      dispatch({\n        type: REPORT_TYPES.DELETE_REPORT,\n        payload: reportId\n      });\n\n      // Gọi API để lấy danh sách báo cáo mới từ backend\n      const res = await getDataAPI('reports', auth.token);\n      dispatch({\n        type: REPORT_TYPES.GET_ALL_REPORT,\n        payload: {\n          ...res.data\n        }\n      });\n\n      // console.log(res)\n      // Notify\n      const msg = {\n        id: reportId,\n        text: 'đã xóa bài viết của bạn vì vi phạm.',\n        recipients: res.data.newPost.user.followers,\n        url: `/post/${reportId}`\n      };\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"names":["deleteDataAPI","getDataAPI","postDataAPI","GLOBALTYPES","createNotify","REPORT_TYPES","CREATE_REPORT","GET_ALL_REPORT","DELETE_REPORT","DELETE_REPORT_ONLY","createReport","_ref","post","reportData","auth","dispatch","length","type","ALERT","payload","error","loading","res","_id","token","data","newReport","reporter","user","success","msg","err","response","getAllReports","deleteReport","_ref2","reportId","socket","id","text","url","deleteReportOnly","_ref3","recipients","newPost","followers"],"sources":["D:/JoynetSocialNetwork/do-an-fe/src/redux/actions/reportAction.js"],"sourcesContent":["import { deleteDataAPI, getDataAPI, postDataAPI } from \"../../utils/fetchData\";\r\nimport { GLOBALTYPES } from \"./globalTypes\";\r\nimport { createNotify } from './notifyAction'\r\n\r\nexport const REPORT_TYPES = {\r\n    CREATE_REPORT: 'CREATE_REPORT',\r\n    GET_ALL_REPORT: 'GET_ALL_REPORT',\r\n    DELETE_REPORT: 'DELETE_REPORT',\r\n    DELETE_REPORT_ONLY: 'DELETE_REPORT_ONLY',\r\n}\r\n\r\nexport const createReport = ({ post, reportData, auth }) => async (dispatch) => {\r\n\r\n    if (reportData.length > 200)\r\n        return dispatch({ type: GLOBALTYPES.ALERT, payload: { error: \"Báo cáo chỉ được tối đa 200 ký tự.\" } })\r\n\r\n    try {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } })\r\n        const res = await postDataAPI(`post/${post._id}/report`, { reportData }, auth.token)\r\n\r\n        dispatch({\r\n            type: REPORT_TYPES.CREATE_REPORT,\r\n            payload: { ...res.data.newReport, reporter: auth.user }\r\n        })\r\n\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } })\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT,\r\n            payload: { error: err.response.data.msg }\r\n        })\r\n    }\r\n}\r\n\r\nexport const getAllReports = (token) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } })\r\n        const res = await getDataAPI('reports', token)\r\n        // console.log(res.data)\r\n\r\n        dispatch({\r\n            type: REPORT_TYPES.GET_ALL_REPORT,\r\n            payload: { ...res.data }\r\n        })\r\n\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } })\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT,\r\n            payload: { error: err.response.data.msg }\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteReport = ({ reportId, auth, socket }) => async (dispatch) => {\r\n    // console.log({post,auth})\r\n\r\n    try {\r\n        // const res = await deleteDataAPI(`report/${report.reports._id}`, auth.token)\r\n        await deleteDataAPI(`report/${reportId}`, auth.token)\r\n        dispatch({ type: REPORT_TYPES.DELETE_REPORT, payload: reportId })\r\n\r\n        // Gọi API để lấy danh sách báo cáo mới từ backend\r\n        const res = await getDataAPI('reports', auth.token);\r\n        dispatch({ type: REPORT_TYPES.GET_ALL_REPORT, payload: { ...res.data } })\r\n\r\n        // console.log(res)\r\n        // Notify\r\n        const msg = {\r\n            id: reportId,\r\n            text: 'đã xóa bài viết của bạn vì vi phạm.',\r\n            // recipients: res.data.newPost.user.followers,\r\n            url: `/post/${reportId}`,\r\n        }\r\n        dispatch(createNotify({ msg, auth, socket }))\r\n        // dispatch(removeNotify({ msg, auth, socket }))\r\n        // Notify\r\n        // const msg = {\r\n        //     id: post._id,\r\n        //     text: 'added a new post.',\r\n        //     recipients: res.data.newPost.user.followers,\r\n        //     url: `/post/${post._id}`,\r\n        // }\r\n\r\n        // dispatch(removeNotify({ msg, auth, socket }))\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT,\r\n            payload: { error: err.response.data.msg }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const deleteReportOnly = ({ reportId, auth, socket }) => async (dispatch) => {\r\n    // console.log({post,auth})\r\n\r\n    try {\r\n        // const res = await deleteDataAPI(`report/${report.reports._id}`, auth.token)\r\n        await deleteDataAPI(`report/${reportId}`, auth.token)\r\n        dispatch({ type: REPORT_TYPES.DELETE_REPORT, payload: reportId })\r\n\r\n        // Gọi API để lấy danh sách báo cáo mới từ backend\r\n        const res = await getDataAPI('reports', auth.token);\r\n        dispatch({ type: REPORT_TYPES.GET_ALL_REPORT, payload: { ...res.data } })\r\n\r\n        // console.log(res)\r\n        // Notify\r\n        const msg = {\r\n            id: reportId,\r\n            text: 'đã xóa bài viết của bạn vì vi phạm.',\r\n            recipients: res.data.newPost.user.followers,\r\n            url: `/post/${reportId}`,\r\n        }\r\n\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT,\r\n            payload: { error: err.response.data.msg }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}