{"ast":null,"code":"import { GLOBALTYPES, DeleteData } from '../actions/globalTypes';\nimport { postDataAPI, getDataAPI, deleteDataAPI } from '../../utils/fetchData';\nexport const MESS_TYPES = {\n  ADD_USER: 'ADD_USER',\n  ADD_MESSAGE: 'ADD_MESSAGE',\n  GET_CONVERSATIONS: 'GET_CONVERSATIONS',\n  GET_MESSAGES: 'GET_MESSAGES',\n  UPDATE_MESSAGES: 'UPDATE_MESSAGES',\n  DELETE_MESSAGES: 'DELETE_MESSAGES',\n  DELETE_CONVERSATION: 'DELETE_CONVERSATION',\n  CHECK_ONLINE_OFFLINE: 'CHECK_ONLINE_OFFLINE',\n  ACCESS_CHAT: 'ACCESS_CHAT',\n  ADD_CHAT: 'ADD_CHAT',\n  SET_SELECTED_CHAT: 'SET_SELECTED_CHAT'\n};\nexport const addMessage = _ref => {\n  let {\n    msg,\n    auth,\n    socket\n  } = _ref;\n  return async dispatch => {\n    dispatch({\n      type: MESS_TYPES.ADD_MESSAGE,\n      payload: msg\n    });\n    const {\n      _id,\n      avatar,\n      fullname,\n      username\n    } = auth.user;\n    socket.emit('addMessage', {\n      ...msg,\n      user: {\n        _id,\n        avatar,\n        fullname,\n        username\n      }\n    });\n    try {\n      await postDataAPI('message', msg, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const accessChat = _ref2 => {\n  let {\n    userId,\n    auth\n  } = _ref2;\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await postDataAPI('chat', {\n        userId\n      }, auth.token);\n      dispatch({\n        type: MESS_TYPES.ADD_CHAT,\n        payload: data\n      });\n      dispatch({\n        type: MESS_TYPES.SET_SELECTED_CHAT,\n        payload: data\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getConversations = _ref3 => {\n  let {\n    auth,\n    page = 1\n  } = _ref3;\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`conversations?page=${page}&limit=9`, auth.token);\n      dispatch({\n        type: MESS_TYPES.GET_CONVERSATIONS,\n        payload: {\n          ...res.data\n        }\n      });\n      return {\n        ...res.data\n      };\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getMessages = _ref4 => {\n  let {\n    auth,\n    id,\n    refDisplay,\n    page = 1\n  } = _ref4;\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\n      const newData = {\n        ...res.data,\n        messages: res.data.messages.reverse()\n      };\n      dispatch({\n        type: MESS_TYPES.GET_MESSAGES,\n        payload: {\n          ...newData,\n          _id: id,\n          page\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const loadMoreMessages = _ref5 => {\n  let {\n    auth,\n    id,\n    page = 1\n  } = _ref5;\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\n      const newData = {\n        ...res.data,\n        messages: res.data.messages.reverse()\n      };\n      dispatch({\n        type: MESS_TYPES.UPDATE_MESSAGES,\n        payload: {\n          ...newData,\n          _id: id,\n          page\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteMessages = _ref6 => {\n  let {\n    msg,\n    data,\n    auth\n  } = _ref6;\n  return async dispatch => {\n    const newData = DeleteData(data, msg._id);\n    dispatch({\n      type: MESS_TYPES.DELETE_MESSAGES,\n      payload: {\n        newData,\n        _id: msg.recipient\n      }\n    });\n    try {\n      await deleteDataAPI(`message/${msg._id}`, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteConversation = _ref7 => {\n  let {\n    auth,\n    id\n  } = _ref7;\n  return async dispatch => {\n    dispatch({\n      type: MESS_TYPES.DELETE_CONVERSATION,\n      payload: id\n    });\n    try {\n      await deleteDataAPI(`conversation/${id}`, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"names":["GLOBALTYPES","DeleteData","postDataAPI","getDataAPI","deleteDataAPI","MESS_TYPES","ADD_USER","ADD_MESSAGE","GET_CONVERSATIONS","GET_MESSAGES","UPDATE_MESSAGES","DELETE_MESSAGES","DELETE_CONVERSATION","CHECK_ONLINE_OFFLINE","ACCESS_CHAT","ADD_CHAT","SET_SELECTED_CHAT","addMessage","_ref","msg","auth","socket","dispatch","type","payload","_id","avatar","fullname","username","user","emit","token","err","ALERT","error","response","data","accessChat","_ref2","userId","getConversations","_ref3","page","res","getMessages","_ref4","id","refDisplay","newData","messages","reverse","loadMoreMessages","_ref5","deleteMessages","_ref6","recipient","deleteConversation","_ref7"],"sources":["D:/JoynetSocialNetwork/do-an-fe/src/redux/actions/messageAction.js"],"sourcesContent":["import { GLOBALTYPES, DeleteData } from '../actions/globalTypes'\r\nimport { postDataAPI, getDataAPI, deleteDataAPI } from '../../utils/fetchData'\r\n\r\nexport const MESS_TYPES = {\r\n    ADD_USER: 'ADD_USER',\r\n    ADD_MESSAGE: 'ADD_MESSAGE',\r\n    GET_CONVERSATIONS: 'GET_CONVERSATIONS',\r\n    GET_MESSAGES: 'GET_MESSAGES',\r\n    UPDATE_MESSAGES: 'UPDATE_MESSAGES',\r\n    DELETE_MESSAGES: 'DELETE_MESSAGES',\r\n    DELETE_CONVERSATION: 'DELETE_CONVERSATION',\r\n    CHECK_ONLINE_OFFLINE: 'CHECK_ONLINE_OFFLINE',\r\n    ACCESS_CHAT: 'ACCESS_CHAT',\r\n    ADD_CHAT: 'ADD_CHAT',\r\n    SET_SELECTED_CHAT: 'SET_SELECTED_CHAT',\r\n}\r\n\r\n\r\n\r\nexport const addMessage = ({ msg, auth, socket }) => async (dispatch) => {\r\n    dispatch({ type: MESS_TYPES.ADD_MESSAGE, payload: msg })\r\n\r\n    const { _id, avatar, fullname, username } = auth.user\r\n    socket.emit('addMessage', { ...msg, user: { _id, avatar, fullname, username } })\r\n\r\n    try {\r\n        await postDataAPI('message', msg, auth.token)\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err.response.data.msg } })\r\n    }\r\n}\r\n\r\nexport const accessChat = ({ userId, auth, }) => async (dispatch) => {\r\n    try {\r\n        const { data } = await postDataAPI('chat', { userId }, auth.token)\r\n        dispatch({ type: MESS_TYPES.ADD_CHAT, payload: data })\r\n        dispatch({ type: MESS_TYPES.SET_SELECTED_CHAT, payload: data })\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err.response.data.msg } })\r\n    }\r\n}\r\n\r\n\r\nexport const getConversations = ({ auth, page = 1 }) => async (dispatch) => {\r\n    try {\r\n        const res = await getDataAPI(`conversations?page=${page}&limit=9`, auth.token)\r\n        dispatch({\r\n            type: MESS_TYPES.GET_CONVERSATIONS,\r\n            payload: { ...res.data }\r\n        })\r\n\r\n        return { ...res.data }\r\n\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err.response.data.msg } })\r\n    }\r\n}\r\n\r\nexport const getMessages = ({ auth, id, refDisplay, page = 1 }) => async (dispatch) => {\r\n    try {\r\n        const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token)\r\n        const newData = { ...res.data, messages: res.data.messages.reverse() }\r\n\r\n        dispatch({ type: MESS_TYPES.GET_MESSAGES, payload: { ...newData, _id: id, page } })\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err.response.data.msg } })\r\n    }\r\n}\r\n\r\nexport const loadMoreMessages = ({ auth, id, page = 1 }) => async (dispatch) => {\r\n    try {\r\n        const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token)\r\n        const newData = { ...res.data, messages: res.data.messages.reverse() }\r\n\r\n        dispatch({ type: MESS_TYPES.UPDATE_MESSAGES, payload: { ...newData, _id: id, page } })\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err.response.data.msg } })\r\n    }\r\n}\r\n\r\nexport const deleteMessages = ({ msg, data, auth }) => async (dispatch) => {\r\n    const newData = DeleteData(data, msg._id)\r\n    dispatch({ type: MESS_TYPES.DELETE_MESSAGES, payload: { newData, _id: msg.recipient } })\r\n    try {\r\n        await deleteDataAPI(`message/${msg._id}`, auth.token)\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err.response.data.msg } })\r\n    }\r\n}\r\n\r\nexport const deleteConversation = ({ auth, id }) => async (dispatch) => {\r\n    dispatch({ type: MESS_TYPES.DELETE_CONVERSATION, payload: id })\r\n    try {\r\n        await deleteDataAPI(`conversation/${id}`, auth.token)\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err.response.data.msg } })\r\n    }\r\n}"],"mappings":"AAAA,SAASA,WAAW,EAAEC,UAAU,QAAQ,wBAAwB;AAChE,SAASC,WAAW,EAAEC,UAAU,EAAEC,aAAa,QAAQ,uBAAuB;AAE9E,OAAO,MAAMC,UAAU,GAAG;EACtBC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,aAAa;EAC1BC,iBAAiB,EAAE,mBAAmB;EACtCC,YAAY,EAAE,cAAc;EAC5BC,eAAe,EAAE,iBAAiB;EAClCC,eAAe,EAAE,iBAAiB;EAClCC,mBAAmB,EAAE,qBAAqB;EAC1CC,oBAAoB,EAAE,sBAAsB;EAC5CC,WAAW,EAAE,aAAa;EAC1BC,QAAQ,EAAE,UAAU;EACpBC,iBAAiB,EAAE;AACvB,CAAC;AAID,OAAO,MAAMC,UAAU,GAAGC,IAAA;EAAA,IAAC;IAAEC,GAAG;IAAEC,IAAI;IAAEC;EAAO,CAAC,GAAAH,IAAA;EAAA,OAAK,MAAOI,QAAQ,IAAK;IACrEA,QAAQ,CAAC;MAAEC,IAAI,EAAElB,UAAU,CAACE,WAAW;MAAEiB,OAAO,EAAEL;IAAI,CAAC,CAAC;IAExD,MAAM;MAAEM,GAAG;MAAEC,MAAM;MAAEC,QAAQ;MAAEC;IAAS,CAAC,GAAGR,IAAI,CAACS,IAAI;IACrDR,MAAM,CAACS,IAAI,CAAC,YAAY,EAAE;MAAE,GAAGX,GAAG;MAAEU,IAAI,EAAE;QAAEJ,GAAG;QAAEC,MAAM;QAAEC,QAAQ;QAAEC;MAAS;IAAE,CAAC,CAAC;IAEhF,IAAI;MACA,MAAM1B,WAAW,CAAC,SAAS,EAAEiB,GAAG,EAAEC,IAAI,CAACW,KAAK,CAAC;IACjD,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVV,QAAQ,CAAC;QAAEC,IAAI,EAAEvB,WAAW,CAACiC,KAAK;QAAET,OAAO,EAAE;UAAEU,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACC,IAAI,CAACjB;QAAI;MAAE,CAAC,CAAC;IACpF;EACJ,CAAC;AAAA;AAED,OAAO,MAAMkB,UAAU,GAAGC,KAAA;EAAA,IAAC;IAAEC,MAAM;IAAEnB;EAAM,CAAC,GAAAkB,KAAA;EAAA,OAAK,MAAOhB,QAAQ,IAAK;IACjE,IAAI;MACA,MAAM;QAAEc;MAAK,CAAC,GAAG,MAAMlC,WAAW,CAAC,MAAM,EAAE;QAAEqC;MAAO,CAAC,EAAEnB,IAAI,CAACW,KAAK,CAAC;MAClET,QAAQ,CAAC;QAAEC,IAAI,EAAElB,UAAU,CAACU,QAAQ;QAAES,OAAO,EAAEY;MAAK,CAAC,CAAC;MACtDd,QAAQ,CAAC;QAAEC,IAAI,EAAElB,UAAU,CAACW,iBAAiB;QAAEQ,OAAO,EAAEY;MAAK,CAAC,CAAC;IACnE,CAAC,CAAC,OAAOJ,GAAG,EAAE;MACVV,QAAQ,CAAC;QAAEC,IAAI,EAAEvB,WAAW,CAACiC,KAAK;QAAET,OAAO,EAAE;UAAEU,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACC,IAAI,CAACjB;QAAI;MAAE,CAAC,CAAC;IACpF;EACJ,CAAC;AAAA;AAGD,OAAO,MAAMqB,gBAAgB,GAAGC,KAAA;EAAA,IAAC;IAAErB,IAAI;IAAEsB,IAAI,GAAG;EAAE,CAAC,GAAAD,KAAA;EAAA,OAAK,MAAOnB,QAAQ,IAAK;IACxE,IAAI;MACA,MAAMqB,GAAG,GAAG,MAAMxC,UAAU,CAAE,sBAAqBuC,IAAK,UAAS,EAAEtB,IAAI,CAACW,KAAK,CAAC;MAC9ET,QAAQ,CAAC;QACLC,IAAI,EAAElB,UAAU,CAACG,iBAAiB;QAClCgB,OAAO,EAAE;UAAE,GAAGmB,GAAG,CAACP;QAAK;MAC3B,CAAC,CAAC;MAEF,OAAO;QAAE,GAAGO,GAAG,CAACP;MAAK,CAAC;IAE1B,CAAC,CAAC,OAAOJ,GAAG,EAAE;MACVV,QAAQ,CAAC;QAAEC,IAAI,EAAEvB,WAAW,CAACiC,KAAK;QAAET,OAAO,EAAE;UAAEU,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACC,IAAI,CAACjB;QAAI;MAAE,CAAC,CAAC;IACpF;EACJ,CAAC;AAAA;AAED,OAAO,MAAMyB,WAAW,GAAGC,KAAA;EAAA,IAAC;IAAEzB,IAAI;IAAE0B,EAAE;IAAEC,UAAU;IAAEL,IAAI,GAAG;EAAE,CAAC,GAAAG,KAAA;EAAA,OAAK,MAAOvB,QAAQ,IAAK;IACnF,IAAI;MACA,MAAMqB,GAAG,GAAG,MAAMxC,UAAU,CAAE,WAAU2C,EAAG,UAASJ,IAAI,GAAG,CAAE,EAAC,EAAEtB,IAAI,CAACW,KAAK,CAAC;MAC3E,MAAMiB,OAAO,GAAG;QAAE,GAAGL,GAAG,CAACP,IAAI;QAAEa,QAAQ,EAAEN,GAAG,CAACP,IAAI,CAACa,QAAQ,CAACC,OAAO,CAAC;MAAE,CAAC;MAEtE5B,QAAQ,CAAC;QAAEC,IAAI,EAAElB,UAAU,CAACI,YAAY;QAAEe,OAAO,EAAE;UAAE,GAAGwB,OAAO;UAAEvB,GAAG,EAAEqB,EAAE;UAAEJ;QAAK;MAAE,CAAC,CAAC;IACvF,CAAC,CAAC,OAAOV,GAAG,EAAE;MACVV,QAAQ,CAAC;QAAEC,IAAI,EAAEvB,WAAW,CAACiC,KAAK;QAAET,OAAO,EAAE;UAAEU,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACC,IAAI,CAACjB;QAAI;MAAE,CAAC,CAAC;IACpF;EACJ,CAAC;AAAA;AAED,OAAO,MAAMgC,gBAAgB,GAAGC,KAAA;EAAA,IAAC;IAAEhC,IAAI;IAAE0B,EAAE;IAAEJ,IAAI,GAAG;EAAE,CAAC,GAAAU,KAAA;EAAA,OAAK,MAAO9B,QAAQ,IAAK;IAC5E,IAAI;MACA,MAAMqB,GAAG,GAAG,MAAMxC,UAAU,CAAE,WAAU2C,EAAG,UAASJ,IAAI,GAAG,CAAE,EAAC,EAAEtB,IAAI,CAACW,KAAK,CAAC;MAC3E,MAAMiB,OAAO,GAAG;QAAE,GAAGL,GAAG,CAACP,IAAI;QAAEa,QAAQ,EAAEN,GAAG,CAACP,IAAI,CAACa,QAAQ,CAACC,OAAO,CAAC;MAAE,CAAC;MAEtE5B,QAAQ,CAAC;QAAEC,IAAI,EAAElB,UAAU,CAACK,eAAe;QAAEc,OAAO,EAAE;UAAE,GAAGwB,OAAO;UAAEvB,GAAG,EAAEqB,EAAE;UAAEJ;QAAK;MAAE,CAAC,CAAC;IAC1F,CAAC,CAAC,OAAOV,GAAG,EAAE;MACVV,QAAQ,CAAC;QAAEC,IAAI,EAAEvB,WAAW,CAACiC,KAAK;QAAET,OAAO,EAAE;UAAEU,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACC,IAAI,CAACjB;QAAI;MAAE,CAAC,CAAC;IACpF;EACJ,CAAC;AAAA;AAED,OAAO,MAAMkC,cAAc,GAAGC,KAAA;EAAA,IAAC;IAAEnC,GAAG;IAAEiB,IAAI;IAAEhB;EAAK,CAAC,GAAAkC,KAAA;EAAA,OAAK,MAAOhC,QAAQ,IAAK;IACvE,MAAM0B,OAAO,GAAG/C,UAAU,CAACmC,IAAI,EAAEjB,GAAG,CAACM,GAAG,CAAC;IACzCH,QAAQ,CAAC;MAAEC,IAAI,EAAElB,UAAU,CAACM,eAAe;MAAEa,OAAO,EAAE;QAAEwB,OAAO;QAAEvB,GAAG,EAAEN,GAAG,CAACoC;MAAU;IAAE,CAAC,CAAC;IACxF,IAAI;MACA,MAAMnD,aAAa,CAAE,WAAUe,GAAG,CAACM,GAAI,EAAC,EAAEL,IAAI,CAACW,KAAK,CAAC;IACzD,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVV,QAAQ,CAAC;QAAEC,IAAI,EAAEvB,WAAW,CAACiC,KAAK;QAAET,OAAO,EAAE;UAAEU,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACC,IAAI,CAACjB;QAAI;MAAE,CAAC,CAAC;IACpF;EACJ,CAAC;AAAA;AAED,OAAO,MAAMqC,kBAAkB,GAAGC,KAAA;EAAA,IAAC;IAAErC,IAAI;IAAE0B;EAAG,CAAC,GAAAW,KAAA;EAAA,OAAK,MAAOnC,QAAQ,IAAK;IACpEA,QAAQ,CAAC;MAAEC,IAAI,EAAElB,UAAU,CAACO,mBAAmB;MAAEY,OAAO,EAAEsB;IAAG,CAAC,CAAC;IAC/D,IAAI;MACA,MAAM1C,aAAa,CAAE,gBAAe0C,EAAG,EAAC,EAAE1B,IAAI,CAACW,KAAK,CAAC;IACzD,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVV,QAAQ,CAAC;QAAEC,IAAI,EAAEvB,WAAW,CAACiC,KAAK;QAAET,OAAO,EAAE;UAAEU,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACC,IAAI,CAACjB;QAAI;MAAE,CAAC,CAAC;IACpF;EACJ,CAAC;AAAA"},"metadata":{},"sourceType":"module"}